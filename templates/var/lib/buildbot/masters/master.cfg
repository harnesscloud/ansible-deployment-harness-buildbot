# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [
  {%- for name in groups.slaves -%}
    {%- for i in range(1, buildbot_slave_process_count+1) -%}
      BuildSlave("slave-{{ hostvars[name].inventory_hostname_short }}-{{ i }}","
                  {{- lookup('password', 
                             buildbot_run_dir + 
                             '/private/credentials/buildslave-password-' +
                             inventory_hostname_short + '-' + i|string +
                             ' length=20 chars=ascii_letters,digits') -}}")
      {%- if not loop.last -%},{%- endif -%}
    {%- endfor -%}
  {%- endfor -%}
]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
{% for project in buildbot_projects %}
c['change_source'].append(GitPoller(
    '{{ project.repo }}', 
    workdir='gitpoller-workdir', 
    branch='{{ project.branch }}',
    pollinterval=300))
{% endfor %}

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                            name="all",
                            change_filter=filter.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["runtests"]))
c['schedulers'].append(ForceScheduler(
                            name="force",
                            builderNames=["runtests"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand

from buildbot.config import BuilderConfig

c['builders'] = []

{% for project in buildbot_projects %}
factory = BuildFactory()
factory.addStep(Git(repourl='{{ project.repo }}', mode='incremental'))
#factory.addStep(ShellCommand(command=["trial", "pyflakes"]))

c['builders'].append(
    BuilderConfig(name="{{ project.name }}-runtests",
      slavenames=[
        {%- for name in groups.slaves -%}
          {%- for i in range(1, buildbot_slave_process_count+1) -%}
            "slave-{{ hostvars[name].inventory_hostname_short }}-{{ i }}"
            {%- if not loop.last -%},{%- endif -%}
          {%- endfor -%}
        {%- endfor -%}
      ],
      factory=factory))
{% endfor %}

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("pyflakes","pyflakes")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "{{ buildbot_title }}"
c['titleURL'] = "{{ buildbot_titleURL }}"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "{{ buildbot_buildbotURL }}"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
